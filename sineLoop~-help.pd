#N canvas 221 86 886 494 10;
#X obj 36 321 sineLoop~;
#X obj 136 321 sineLoop~;
#X obj 89 385 *~ 0.1;
#X obj 89 417 dac~;
#X obj 192 247 osc~ 0.25;
#X obj 192 269 *~ 0.1;
#X obj 192 291 +~ 0.1;
#X obj 36 245 loadbang;
#X obj 36 267 t b b;
#X msg 36 289 400;
#X msg 136 284 500;
#X obj 24 18 cnv 15 400 40 empty empty empty 20 12 0 14 -191765 -66577
0;
#X text 34 67 The output of the oscillator \, multiplyed by feedback
\, is added to itself to brighten the sound.;
#X text 34 97 This external is a translation from the SineLoop object source code of
Pyo \, a Python module for DSP \, found at http://ajaxsoundstudio.com/software/pyo/
;
#X text 469 77 Inlets:;
#X text 506 95 1st (signal): frequency;
#X text 474 167 Outlets: Feedback sine wave;
#X text 34 21 [sineLoop~]: A simple sine wave oscillator with feedback
\, translated from Pyo's source code.;
#X text 35 201 Note: the closer the feedback is to 1 \, the more noisy
the sine wave becomes.;
#X text 543 397 Written by Alexandros Drymonitis;
#X text 470 26 Arguments: none. I still find it difficult to enable
arguments which can be overridden by signals. It's in my TODO list
\, but I don't know when that will be.;
#X text 507 111 2nd (signal): feedback amount (0 - 1 \, values below
or above are clipped);
#X text 507 140 3rd (control): phase reset (0 - 1);
#X text 34 140 The advantage of having an external for this \, is that
it is sample block free \, as the feedback occurs at each sample. The
example below imitates the example of the SineLoop class from the Pyo
documentation.;
#X connect 0 0 2 0;
#X connect 1 0 2 0;
#X connect 2 0 3 0;
#X connect 2 0 3 1;
#X connect 4 0 5 0;
#X connect 5 0 6 0;
#X connect 6 0 1 1;
#X connect 6 0 0 1;
#X connect 7 0 8 0;
#X connect 8 0 9 0;
#X connect 8 1 10 0;
#X connect 9 0 0 0;
#X connect 10 0 1 0;
